<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="modules">
  <title>Cockpit Modules</title>

  <para>Cockpit is separated into various modules, each of which brings specific
    features and/or code.</para>

  <warning>
    <para>It is not yet possible to implement arbitrary new modules.</para>

    <para>In addition, any APIs or behavior not explicitly documented here is an
      internal API and can be changed at any time.</para>
  </warning>

  <section id="module-layout">
    <title>Layout of Module Files</title>

    <para>A module consists of one or more files placed in a directory or its
      subdirectories. It must have a <code>manifest.json</code> file and follow
      certain naming conventions.</para>

    <para>The name of a module is the name of the directory.</para>

    <para>The name of the module must be ASCII alphanumeric, and may contain an underscore.
	    Names of directories and files in the module must consist of ASCII alphanumeric
	    along with dash, underscore, dot, and comma. No spaces are allowed.</para>

    <para>Cockpit uses the data directories from the
      <ulink url="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory
        Specification</ulink>
      to locate modules. The <code>$XDG_DATA_DIRS</code> represents a colon separate list of system data
      directories, and <code>$XDG_DATA_HOME</code> is a user specific data directory. If the environment
      variables are not set, defaults are used, according to the spec.</para>

    <para>A <code>cockpit/</code> subdirectories in any of these data directories is the location where
      modules are loaded by Cockpit. If Cockpit finds a module with the same name, in multiple data
      directories, then the first one wins. According to the spec the first data directory is
      <code>$XDG_DATA_HOME</code> and then <code>$XDG_DATA_DIRS</code> in order.</para>

    <para>This means that, by default the following directories are searched for cockpit modules, and
      in this order:</para>

    <itemizedlist>
      <listitem><para><code>~/.local/share/cockpit/</code></para></listitem>
      <listitem><para><code>/usr/local/share/cockpit/</code></para></listitem>
      <listitem><para><code>/usr/share/cockpit/</code></para></listitem>
    </itemizedlist>

    <para>Modules placed in <code>$XDG_DATA_HOME</code> are not cached by Cockpit or the web browser.
      Other modules are cached agressively, and are accessed using a checksum of the files in
      the module and their names.</para>

    <para>To further clarify things, here is an example module called "my-module" and its file layout:</para>

<programlisting>
/usr/share/cockpit/
    my-module/
        manifest.json
        file.html
        some.js
</programlisting>

    <para>Place or symlink modules in your <code>~/.local/share/cockpit</code> directory (or appropriate
      <code>$XDG_DATA_HOME</code> location) that you would like to modify and develop. System installed
      modules should not change while Cockpit is running.</para>

  </section>

  <section id="module-manifest">
    <title>Module Manifest</title>

    <para>Each module has a <code>manifest.json</code> file. It is a JSON object. The following
      fields may be present in the manifest:</para>

    <variablelist>
      <varlistentry>
        <term>version</term>
        <listitem><para>An informational version number for the module.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="module-links">
    <title>Module Links and Paths</title>

    <para>When referring to files in your module, such as in a hyperlink or a <code>&lt;style&gt;</code>
      tag or <code>&lt;script&gt;</code> tag, simply use a relative path, and refer to the files
      in the same directory.</para>

    <para>However often the need arises to refer from one module to another, for example when
      loading the base <code>cockpit.js</code> javascript. To do this the path must be
      crafted in a specific way: <code>../@@module@@/path</code></para>

    <para>The <code>@@module@@</code> is replaced by the relevant path component to address the
      the module. Put the module name between the <code>@@</code> signs. It will be replaced with
      a cacheable checksum of the module, or qualified module name at the given host. Don't hardcode
      the path, use the <code>@@</code> syntax.</para>

    <para>For example here's how to include the base <code>cockpit.js</code> script in your HTML
      from the <code>unstable</code> module:</para>

<programlisting>
  &lt;script src="../@@unstable@@"&gt;&lt;/script&gt;
</programlisting>

    <para>Do not assume you can link to any file in any other module. Refer to the
      <link linkend="api-listing">list of resources</link> for those that are
      available for use.</para>
  </section>

  <section id="module-minified">
    <title>Minified Resources</title>

    <para>If minified resources are provided, they should be provided along with the non-minified
      file. This allows developers to debug module code when necessary.</para>

    <para>Minified files should contain a <code>.min</code> suffix before their usual file
      extension. They will automatically be used in place of the unminified file, when your
      the module is installed. This applies for HTML, JS, CSS or other types of resources.</para>

    <para>For example if you have a javascript file called <code>test.js</code> its minified
      version should be placed in a file called <code>test.min.js</code> in the same directory.</para>

    <para>To force Cockpit to use non-minified resources, link the module into your home directory
      as described in the section on <link linkend="module-layout">Module Layout</link>.</para>
  </section>

</chapter>
